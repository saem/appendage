<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <!--

        @TODO

        * Differentiate between Entities (things that vary state over time), and
            Actors, Entities that can initiate actions (maybe)
        * TUUID for sequences, assuming they're efficient
        * naming convention for primary keys and foreign keys
        * indicees
        * views

    -->
    
    <changeSet id="1" author="saem">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="entities" />
            </not>
        </preConditions>

        <createTable tableName="entities">
            <column name="entity_id" type="bigint" autoIncrement="true">
                <constraints primaryKeyName="pk_entities_entity_id" primaryKey="true" />
            </column>
            <column name="entity_type" type="varchar(255)">
                <constraints nullable="false" />
            </column>
        </createTable>
    </changeSet>
    
    <changeSet id="2" author="saem">
        <preConditions onFail="MARK_RAN">
            <tableIsEmpty tableName="entities" />
        </preConditions>
        
        <!-- Entities that are extrinsic to the interals of the System -->
        <insert tableName="entities">
            <column name="entity_id" value="1" />
            <column name="entity_type" value="system" />
        </insert>
    </changeSet>
        
    <changeSet id="3" author="saem">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="events" />
            </not>
        </preConditions>
        
        <!-- Events -->
        
        <createTable tableName="events">
            
            <!--
            There are two requirements primary for the events table:
            - They provide a valid partial order based on causality of events.
            - They are stored on disk in a total order satisfying the partial 
                order.
            -->
            
            <column name="sequence" type="bigint" autoIncrement="true">
                <constraints primaryKeyName="pk_events_sequence" primaryKey="true" />
            </column>
            <column name="event" type="varchar(255)">
                <constraints nullable="false" />
            </column>
            <column name="version" type="int">
                <constraints nullable="false" />
            </column>
            <column name="entity_id" type="bigint">
                <constraints foreignKeyName="fk_events_entities"
                             referencedTableName="entities"
                             referencedColumnNames="entity_id"
                             nullable="false" />
            </column>
            <column name="when" type="datetime">
                <constraints nullable="false" />
            </column>
        </createTable>
    </changeSet>
        
    <!-- Users -->
        
    <changeSet id="4" author="saem">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="user_states" />
            </not>
        </preConditions>
        
        <createTable tableName="user_states">
            <column name="sequence" type="bigint">
                <constraints primaryKeyName="pk_user_states_sequence" 
                             primaryKey="true"
                             foreignKeyName="fk_user_states_events"
                             referencedTableName="events"
                             referencedColumnNames="sequence" />
            </column>
            <column name="user_id" type="bigint">
                <constraints foreignKeyName="fk_user_states_entities"
                             referencedTableName="entities"
                             referencedColumnNames="entity_id"
                             nullable="false" />
            </column>
            <column name="username" type="varchar(255)">
                <constraints nullable="false" />
            </column>
            <column name="email" type="varchar(255)">
                <constraints nullable="false" />
            </column>
            <column name="password" type="varchar(60)">
                <constraints nullable="false" />
            </column>
            <column name="is_disabled" type="bool" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
            <column name="is_deleted" type="bool" defaultValueBoolean="false">
                <constraints nullable="false"/>
            </column>
        </createTable>
        
        <!--
        TODO:
            * index by (user_id, sequence) for fast max(sequence) group by user_id queries (current_users view)?
        -->
        
    </changeSet>
    
    <changeSet id="5" author="saem">
        <preConditions onFail="MARK_RAN">
            <not>
                <viewExists viewName="current_users" />
            </not>
        </preConditions>
        
        <createView viewName="current_users">
            select
              user_states.user_id,
              user_states.sequence,
              user_states.username,
              user_states.email,
              user_states.password,
              user_states.is_disabled
            from user_states
              inner join
                (select max(sequence) as sequence, user_id from user_states group by user_id) as current_user_states
                  ON (user_states.user_id = current_user_states.user_id 
                  and user_states.sequence = current_user_states.sequence)
            where user_states.is_disabled = false
        </createView>

        <!--
        TODO:
            * might be worth making this a materialized view
        -->
    </changeSet>

</databaseChangeLog>
